module.exports = {

"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({});
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({});
;
;
;
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/semconv.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * This file contains a copy of unstable semantic convention definitions
 * used by this package.
 * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv
 */ /**
 * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).
 *
 * @example arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */ __turbopack_context__.s({
    "ATTR_AWS_ECS_CLUSTER_ARN": (()=>ATTR_AWS_ECS_CLUSTER_ARN),
    "ATTR_AWS_ECS_CONTAINER_ARN": (()=>ATTR_AWS_ECS_CONTAINER_ARN),
    "ATTR_AWS_ECS_LAUNCHTYPE": (()=>ATTR_AWS_ECS_LAUNCHTYPE),
    "ATTR_AWS_ECS_TASK_ARN": (()=>ATTR_AWS_ECS_TASK_ARN),
    "ATTR_AWS_ECS_TASK_FAMILY": (()=>ATTR_AWS_ECS_TASK_FAMILY),
    "ATTR_AWS_ECS_TASK_REVISION": (()=>ATTR_AWS_ECS_TASK_REVISION),
    "ATTR_AWS_LOG_GROUP_ARNS": (()=>ATTR_AWS_LOG_GROUP_ARNS),
    "ATTR_AWS_LOG_GROUP_NAMES": (()=>ATTR_AWS_LOG_GROUP_NAMES),
    "ATTR_AWS_LOG_STREAM_ARNS": (()=>ATTR_AWS_LOG_STREAM_ARNS),
    "ATTR_AWS_LOG_STREAM_NAMES": (()=>ATTR_AWS_LOG_STREAM_NAMES),
    "ATTR_CLOUD_ACCOUNT_ID": (()=>ATTR_CLOUD_ACCOUNT_ID),
    "ATTR_CLOUD_AVAILABILITY_ZONE": (()=>ATTR_CLOUD_AVAILABILITY_ZONE),
    "ATTR_CLOUD_PLATFORM": (()=>ATTR_CLOUD_PLATFORM),
    "ATTR_CLOUD_PROVIDER": (()=>ATTR_CLOUD_PROVIDER),
    "ATTR_CLOUD_REGION": (()=>ATTR_CLOUD_REGION),
    "ATTR_CLOUD_RESOURCE_ID": (()=>ATTR_CLOUD_RESOURCE_ID),
    "ATTR_CONTAINER_ID": (()=>ATTR_CONTAINER_ID),
    "ATTR_CONTAINER_NAME": (()=>ATTR_CONTAINER_NAME),
    "ATTR_FAAS_INSTANCE": (()=>ATTR_FAAS_INSTANCE),
    "ATTR_FAAS_MAX_MEMORY": (()=>ATTR_FAAS_MAX_MEMORY),
    "ATTR_FAAS_NAME": (()=>ATTR_FAAS_NAME),
    "ATTR_FAAS_VERSION": (()=>ATTR_FAAS_VERSION),
    "ATTR_HOST_ID": (()=>ATTR_HOST_ID),
    "ATTR_HOST_NAME": (()=>ATTR_HOST_NAME),
    "ATTR_HOST_TYPE": (()=>ATTR_HOST_TYPE),
    "ATTR_K8S_CLUSTER_NAME": (()=>ATTR_K8S_CLUSTER_NAME),
    "ATTR_SERVICE_INSTANCE_ID": (()=>ATTR_SERVICE_INSTANCE_ID),
    "ATTR_SERVICE_NAMESPACE": (()=>ATTR_SERVICE_NAMESPACE),
    "CLOUD_PLATFORM_VALUE_AWS_EC2": (()=>CLOUD_PLATFORM_VALUE_AWS_EC2),
    "CLOUD_PLATFORM_VALUE_AWS_ECS": (()=>CLOUD_PLATFORM_VALUE_AWS_ECS),
    "CLOUD_PLATFORM_VALUE_AWS_EKS": (()=>CLOUD_PLATFORM_VALUE_AWS_EKS),
    "CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK": (()=>CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK),
    "CLOUD_PLATFORM_VALUE_AWS_LAMBDA": (()=>CLOUD_PLATFORM_VALUE_AWS_LAMBDA),
    "CLOUD_PROVIDER_VALUE_AWS": (()=>CLOUD_PROVIDER_VALUE_AWS)
});
var ATTR_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';
var ATTR_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';
var ATTR_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';
var ATTR_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';
var ATTR_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';
var ATTR_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';
var ATTR_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';
var ATTR_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';
var ATTR_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';
var ATTR_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';
var ATTR_CLOUD_ACCOUNT_ID = 'cloud.account.id';
var ATTR_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';
var ATTR_CLOUD_PLATFORM = 'cloud.platform';
var ATTR_CLOUD_PROVIDER = 'cloud.provider';
var ATTR_CLOUD_REGION = 'cloud.region';
var ATTR_CLOUD_RESOURCE_ID = 'cloud.resource_id';
var ATTR_CONTAINER_ID = 'container.id';
var ATTR_CONTAINER_NAME = 'container.name';
var ATTR_FAAS_NAME = 'faas.name';
var ATTR_FAAS_INSTANCE = 'faas.instance';
var ATTR_FAAS_MAX_MEMORY = 'faas.max_memory';
var ATTR_FAAS_VERSION = 'faas.version';
var ATTR_HOST_ID = 'host.id';
var ATTR_HOST_NAME = 'host.name';
var ATTR_HOST_TYPE = 'host.type';
var ATTR_K8S_CLUSTER_NAME = 'k8s.cluster.name';
var ATTR_SERVICE_INSTANCE_ID = 'service.instance.id';
var ATTR_SERVICE_NAMESPACE = 'service.namespace';
var CLOUD_PLATFORM_VALUE_AWS_EC2 = 'aws_ec2';
var CLOUD_PLATFORM_VALUE_AWS_ECS = 'aws_ecs';
var CLOUD_PLATFORM_VALUE_AWS_EKS = 'aws_eks';
var CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';
var CLOUD_PLATFORM_VALUE_AWS_LAMBDA = 'aws_lambda';
var CLOUD_PROVIDER_VALUE_AWS = 'aws'; //# sourceMappingURL=semconv.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsBeanstalkDetectorSync.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsBeanstalkDetectorSync": (()=>AwsBeanstalkDetectorSync),
    "awsBeanstalkDetectorSync": (()=>awsBeanstalkDetectorSync)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/@opentelemetry/api [external] (@opentelemetry/api, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resources/build/esm/Resource.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$stable_attributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/semconv.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/fs [external] (fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/util [external] (util, cjs)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    "TURBOPACK unreachable";
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
;
;
;
;
;
;
;
/**
 * The AwsBeanstalkDetector can be used to detect if a process is running in AWS Elastic
 * Beanstalk and return a {@link Resource} populated with data about the beanstalk
 * plugins of AWS X-Ray. Returns an empty Resource if detection fails.
 *
 * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf
 * for more details about detecting information of Elastic Beanstalk plugins
 */ var DEFAULT_BEANSTALK_CONF_PATH = '/var/elasticbeanstalk/xray/environment.conf';
var WIN_OS_BEANSTALK_CONF_PATH = 'C:\\Program Files\\Amazon\\XRay\\environment.conf';
var AwsBeanstalkDetectorSync = function() {
    function AwsBeanstalkDetectorSync() {
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        } else {
            this.BEANSTALK_CONF_PATH = DEFAULT_BEANSTALK_CONF_PATH;
        }
    }
    AwsBeanstalkDetectorSync.prototype.detect = function(config) {
        var _this = this;
        var attributes = __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].with((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["suppressTracing"])(__TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].active()), function() {
            return _this._getAttributes();
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"]({}, attributes);
    };
    /**
     * Attempts to obtain AWS Beanstalk configuration from the file
     * system. If file is accesible and read succesfully it returns
     * a promise containing a {@link ResourceAttributes}
     * object with instance metadata. Returns a promise containing an
     * empty {@link ResourceAttributes} if the file is not accesible or
     * fails in the reading process.
     */ AwsBeanstalkDetectorSync.prototype._getAttributes = function(_config) {
        return __awaiter(this, void 0, void 0, function() {
            var rawData, parsedData, e_1;
            var _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _b.trys.push([
                            0,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            AwsBeanstalkDetectorSync.fileAccessAsync(this.BEANSTALK_CONF_PATH, __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["constants"].R_OK)
                        ];
                    case 1:
                        _b.sent();
                        return [
                            4 /*yield*/ ,
                            AwsBeanstalkDetectorSync.readFileAsync(this.BEANSTALK_CONF_PATH, 'utf8')
                        ];
                    case 2:
                        rawData = _b.sent();
                        parsedData = JSON.parse(rawData);
                        return [
                            2 /*return*/ ,
                            (_a = {}, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PROVIDER"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PROVIDER_VALUE_AWS"], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PLATFORM"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK"], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$stable_attributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_SERVICE_NAME"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK"], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_SERVICE_NAMESPACE"]] = parsedData.environment_name, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$stable_attributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_SERVICE_VERSION"]] = parsedData.version_label, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_SERVICE_INSTANCE_ID"]] = parsedData.deployment_id, _a)
                        ];
                    case 3:
                        e_1 = _b.sent();
                        __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["diag"].debug("AwsBeanstalkDetectorSync failed: " + e_1.message);
                        return [
                            2 /*return*/ ,
                            {}
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AwsBeanstalkDetectorSync.readFileAsync = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__["promisify"])(__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["readFile"]);
    AwsBeanstalkDetectorSync.fileAccessAsync = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__["promisify"])(__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["access"]);
    return AwsBeanstalkDetectorSync;
}();
;
var awsBeanstalkDetectorSync = new AwsBeanstalkDetectorSync(); //# sourceMappingURL=AwsBeanstalkDetectorSync.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsBeanstalkDetector.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsBeanstalkDetector": (()=>AwsBeanstalkDetector),
    "awsBeanstalkDetector": (()=>awsBeanstalkDetector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsBeanstalkDetectorSync.js [app-rsc] (ecmascript)");
;
/**
 * The AwsBeanstalkDetector can be used to detect if a process is running in AWS Elastic
 * Beanstalk and return a {@link Resource} populated with data about the beanstalk
 * plugins of AWS X-Ray. Returns an empty Resource if detection fails.
 *
 * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf
 * for more details about detecting information of Elastic Beanstalk plugins
 *
 * @deprecated Use {@link AwsBeanstalkDetectorSync} class instead.
 */ var AwsBeanstalkDetector = function() {
    function AwsBeanstalkDetector() {}
    AwsBeanstalkDetector.prototype.detect = function(config) {
        return Promise.resolve(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsBeanstalkDetectorSync"].detect(config));
    };
    return AwsBeanstalkDetector;
}();
;
var awsBeanstalkDetector = new AwsBeanstalkDetector(); //# sourceMappingURL=AwsBeanstalkDetector.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEc2DetectorSync.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "awsEc2DetectorSync": (()=>awsEc2DetectorSync)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/@opentelemetry/api [external] (@opentelemetry/api, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resources/build/esm/Resource.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/semconv.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$http__$5b$external$5d$__$28$http$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/http [external] (http, cjs)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    "TURBOPACK unreachable";
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
;
;
;
;
;
/**
 * The AwsEc2DetectorSync can be used to detect if a process is running in AWS EC2
 * and return a {@link Resource} populated with metadata about the EC2
 * instance. Returns an empty Resource if detection fails.
 */ var AwsEc2DetectorSync = function() {
    function AwsEc2DetectorSync() {
        /**
         * See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html
         * for documentation about the AWS instance identity document
         * and standard of IMDSv2.
         */ this.AWS_IDMS_ENDPOINT = '169.254.169.254';
        this.AWS_INSTANCE_TOKEN_DOCUMENT_PATH = '/latest/api/token';
        this.AWS_INSTANCE_IDENTITY_DOCUMENT_PATH = '/latest/dynamic/instance-identity/document';
        this.AWS_INSTANCE_HOST_DOCUMENT_PATH = '/latest/meta-data/hostname';
        this.AWS_METADATA_TTL_HEADER = 'X-aws-ec2-metadata-token-ttl-seconds';
        this.AWS_METADATA_TOKEN_HEADER = 'X-aws-ec2-metadata-token';
        this.MILLISECOND_TIME_OUT = 5000;
    }
    AwsEc2DetectorSync.prototype.detect = function(_config) {
        var _this = this;
        var attributes = __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].with((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["suppressTracing"])(__TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].active()), function() {
            return _this._getAttributes();
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"]({}, attributes);
    };
    /**
     * Attempts to connect and obtain an AWS instance Identity document. If the
     * connection is successful it returns a promise containing a {@link ResourceAttributes}
     * object with instance metadata. Returns a promise containing an
     * empty {@link ResourceAttributes} if the connection or parsing of the identity
     * document fails.
     */ AwsEc2DetectorSync.prototype._getAttributes = function() {
        return __awaiter(this, void 0, void 0, function() {
            var token, _a, accountId, instanceId, instanceType, region, availabilityZone, hostname, _b;
            var _c;
            return __generator(this, function(_d) {
                switch(_d.label){
                    case 0:
                        _d.trys.push([
                            0,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._fetchToken()
                        ];
                    case 1:
                        token = _d.sent();
                        return [
                            4 /*yield*/ ,
                            this._fetchIdentity(token)
                        ];
                    case 2:
                        _a = _d.sent(), accountId = _a.accountId, instanceId = _a.instanceId, instanceType = _a.instanceType, region = _a.region, availabilityZone = _a.availabilityZone;
                        return [
                            4 /*yield*/ ,
                            this._fetchHost(token)
                        ];
                    case 3:
                        hostname = _d.sent();
                        return [
                            2 /*return*/ ,
                            (_c = {}, _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PROVIDER"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PROVIDER_VALUE_AWS"], _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PLATFORM"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PLATFORM_VALUE_AWS_EC2"], _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_ACCOUNT_ID"]] = accountId, _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_REGION"]] = region, _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_AVAILABILITY_ZONE"]] = availabilityZone, _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_HOST_ID"]] = instanceId, _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_HOST_TYPE"]] = instanceType, _c[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_HOST_NAME"]] = hostname, _c)
                        ];
                    case 4:
                        _b = _d.sent();
                        return [
                            2 /*return*/ ,
                            {}
                        ];
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AwsEc2DetectorSync.prototype._fetchToken = function() {
        return __awaiter(this, void 0, void 0, function() {
            var options;
            var _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        options = {
                            host: this.AWS_IDMS_ENDPOINT,
                            path: this.AWS_INSTANCE_TOKEN_DOCUMENT_PATH,
                            method: 'PUT',
                            timeout: this.MILLISECOND_TIME_OUT,
                            headers: (_a = {}, _a[this.AWS_METADATA_TTL_HEADER] = '60', _a)
                        };
                        return [
                            4 /*yield*/ ,
                            this._fetchString(options)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _b.sent()
                        ];
                }
            });
        });
    };
    AwsEc2DetectorSync.prototype._fetchIdentity = function(token) {
        return __awaiter(this, void 0, void 0, function() {
            var options, identity;
            var _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        options = {
                            host: this.AWS_IDMS_ENDPOINT,
                            path: this.AWS_INSTANCE_IDENTITY_DOCUMENT_PATH,
                            method: 'GET',
                            timeout: this.MILLISECOND_TIME_OUT,
                            headers: (_a = {}, _a[this.AWS_METADATA_TOKEN_HEADER] = token, _a)
                        };
                        return [
                            4 /*yield*/ ,
                            this._fetchString(options)
                        ];
                    case 1:
                        identity = _b.sent();
                        return [
                            2 /*return*/ ,
                            JSON.parse(identity)
                        ];
                }
            });
        });
    };
    AwsEc2DetectorSync.prototype._fetchHost = function(token) {
        return __awaiter(this, void 0, void 0, function() {
            var options;
            var _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        options = {
                            host: this.AWS_IDMS_ENDPOINT,
                            path: this.AWS_INSTANCE_HOST_DOCUMENT_PATH,
                            method: 'GET',
                            timeout: this.MILLISECOND_TIME_OUT,
                            headers: (_a = {}, _a[this.AWS_METADATA_TOKEN_HEADER] = token, _a)
                        };
                        return [
                            4 /*yield*/ ,
                            this._fetchString(options)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _b.sent()
                        ];
                }
            });
        });
    };
    /**
     * Establishes an HTTP connection to AWS instance document url.
     * If the application is running on an EC2 instance, we should be able
     * to get back a valid JSON document. Parses that document and stores
     * the identity properties in a local map.
     */ AwsEc2DetectorSync.prototype._fetchString = function(options) {
        return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var timeoutId = setTimeout(function() {
                            req.abort();
                            reject(new Error('EC2 metadata api request timed out.'));
                        }, _this.MILLISECOND_TIME_OUT);
                        var req = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$http__$5b$external$5d$__$28$http$2c$__cjs$29$__["request"])(options, function(res) {
                            clearTimeout(timeoutId);
                            var statusCode = res.statusCode;
                            res.setEncoding('utf8');
                            var rawData = '';
                            res.on('data', function(chunk) {
                                return rawData += chunk;
                            });
                            res.on('end', function() {
                                if (statusCode && statusCode >= 200 && statusCode < 300) {
                                    try {
                                        resolve(rawData);
                                    } catch (e) {
                                        reject(e);
                                    }
                                } else {
                                    reject(new Error('Failed to load page, status code: ' + statusCode));
                                }
                            });
                        });
                        req.on('error', function(err) {
                            clearTimeout(timeoutId);
                            reject(err);
                        });
                        req.end();
                    })
                ];
            });
        });
    };
    return AwsEc2DetectorSync;
}();
var awsEc2DetectorSync = new AwsEc2DetectorSync(); //# sourceMappingURL=AwsEc2DetectorSync.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEc2Detector.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "awsEc2Detector": (()=>awsEc2Detector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEc2DetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEc2DetectorSync.js [app-rsc] (ecmascript)");
;
/**
 * The AwsEc2Detector can be used to detect if a process is running in AWS EC2
 * and return a {@link Resource} populated with metadata about the EC2
 * instance.
 *
 * @deprecated Use {@link AwsEc2DetectorSync} class instead.
 */ var AwsEc2Detector = function() {
    function AwsEc2Detector() {}
    AwsEc2Detector.prototype.detect = function(_config) {
        return Promise.resolve(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEc2DetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEc2DetectorSync"].detect(_config));
    };
    return AwsEc2Detector;
}();
var awsEc2Detector = new AwsEc2Detector(); //# sourceMappingURL=AwsEc2Detector.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEcsDetectorSync.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsEcsDetectorSync": (()=>AwsEcsDetectorSync),
    "awsEcsDetectorSync": (()=>awsEcsDetectorSync)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/@opentelemetry/api [external] (@opentelemetry/api, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resources/build/esm/Resource.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/semconv.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$http__$5b$external$5d$__$28$http$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/http [external] (http, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/util [external] (util, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/fs [external] (fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$os__$5b$external$5d$__$28$os$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/os [external] (os, cjs)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    "TURBOPACK unreachable";
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
;
;
;
;
;
;
;
;
var HTTP_TIMEOUT_IN_MS = 1000;
/**
 * The AwsEcsDetector can be used to detect if a process is running in AWS
 * ECS and return a {@link Resource} populated with data about the ECS
 * plugins of AWS X-Ray. Returns an empty Resource if detection fails.
 */ var AwsEcsDetectorSync = function() {
    function AwsEcsDetectorSync() {}
    AwsEcsDetectorSync.prototype.detect = function() {
        var _this = this;
        var attributes = __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].with((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["suppressTracing"])(__TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].active()), function() {
            return _this._getAttributes();
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"]({}, attributes);
    };
    AwsEcsDetectorSync.prototype._getAttributes = function() {
        return __awaiter(this, void 0, void 0, function() {
            var resource, _a, _b, metadataUrl, _c, containerMetadata, taskMetadata, metadatav4Resource, logsResource, _d;
            var _e;
            return __generator(this, function(_f) {
                switch(_f.label){
                    case 0:
                        if (!process.env.ECS_CONTAINER_METADATA_URI_V4 && !process.env.ECS_CONTAINER_METADATA_URI) {
                            __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["diag"].debug('AwsEcsDetector failed: Process is not on ECS');
                            return [
                                2 /*return*/ ,
                                {}
                            ];
                        }
                        _f.label = 1;
                    case 1:
                        _f.trys.push([
                            1,
                            7,
                            ,
                            8
                        ]);
                        _b = (_a = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"]((_e = {}, _e[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PROVIDER"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PROVIDER_VALUE_AWS"], _e[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PLATFORM"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PLATFORM_VALUE_AWS_ECS"], _e))).merge;
                        return [
                            4 /*yield*/ ,
                            AwsEcsDetectorSync._getContainerIdAndHostnameResource()
                        ];
                    case 2:
                        resource = _b.apply(_a, [
                            _f.sent()
                        ]);
                        metadataUrl = process.env.ECS_CONTAINER_METADATA_URI_V4;
                        if (!metadataUrl) return [
                            3 /*break*/ ,
                            6
                        ];
                        return [
                            4 /*yield*/ ,
                            Promise.all([
                                AwsEcsDetectorSync._getUrlAsJson(metadataUrl),
                                AwsEcsDetectorSync._getUrlAsJson(metadataUrl + "/task")
                            ])
                        ];
                    case 3:
                        _c = _f.sent(), containerMetadata = _c[0], taskMetadata = _c[1];
                        return [
                            4 /*yield*/ ,
                            AwsEcsDetectorSync._getMetadataV4Resource(containerMetadata, taskMetadata)
                        ];
                    case 4:
                        metadatav4Resource = _f.sent();
                        return [
                            4 /*yield*/ ,
                            AwsEcsDetectorSync._getLogResource(containerMetadata)
                        ];
                    case 5:
                        logsResource = _f.sent();
                        resource = resource.merge(metadatav4Resource).merge(logsResource);
                        _f.label = 6;
                    case 6:
                        return [
                            2 /*return*/ ,
                            resource.attributes
                        ];
                    case 7:
                        _d = _f.sent();
                        return [
                            2 /*return*/ ,
                            {}
                        ];
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Read container ID from cgroup file
     * In ECS, even if we fail to find target file
     * or target file does not contain container ID
     * we do not throw an error but throw warning message
     * and then return null string
     */ AwsEcsDetectorSync._getContainerIdAndHostnameResource = function() {
        return __awaiter(this, void 0, void 0, function() {
            var hostName, containerId, rawData, splitData, _i, splitData_1, str, e_1;
            var _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        hostName = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$os__$5b$external$5d$__$28$os$2c$__cjs$29$__["hostname"])();
                        containerId = '';
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            AwsEcsDetectorSync.readFileAsync(AwsEcsDetectorSync.DEFAULT_CGROUP_PATH, 'utf8')
                        ];
                    case 2:
                        rawData = _b.sent();
                        splitData = rawData.trim().split('\n');
                        for(_i = 0, splitData_1 = splitData; _i < splitData_1.length; _i++){
                            str = splitData_1[_i];
                            if (str.length > AwsEcsDetectorSync.CONTAINER_ID_LENGTH) {
                                containerId = str.substring(str.length - AwsEcsDetectorSync.CONTAINER_ID_LENGTH);
                                break;
                            }
                        }
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_1 = _b.sent();
                        __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["diag"].debug('AwsEcsDetector failed to read container ID', e_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        if (hostName || containerId) {
                            return [
                                2 /*return*/ ,
                                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"]((_a = {}, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CONTAINER_NAME"]] = hostName || '', _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CONTAINER_ID"]] = containerId || '', _a))
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"].empty()
                        ];
                }
            });
        });
    };
    AwsEcsDetectorSync._getMetadataV4Resource = function(containerMetadata, taskMetadata) {
        return __awaiter(this, void 0, void 0, function() {
            var launchType, taskArn, baseArn, cluster, accountId, region, availabilityZone, clusterArn, containerArn, attributes;
            var _a;
            return __generator(this, function(_b) {
                launchType = taskMetadata['LaunchType'];
                taskArn = taskMetadata['TaskARN'];
                baseArn = taskArn.substring(0, taskArn.lastIndexOf(':'));
                cluster = taskMetadata['Cluster'];
                accountId = AwsEcsDetectorSync._getAccountFromArn(taskArn);
                region = AwsEcsDetectorSync._getRegionFromArn(taskArn);
                availabilityZone = taskMetadata === null || taskMetadata === void 0 ? void 0 : taskMetadata.AvailabilityZone;
                clusterArn = cluster.startsWith('arn:') ? cluster : baseArn + ":cluster/" + cluster;
                containerArn = containerMetadata['ContainerARN'];
                attributes = (_a = {}, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_ECS_CONTAINER_ARN"]] = containerArn, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_ECS_CLUSTER_ARN"]] = clusterArn, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_ECS_LAUNCHTYPE"]] = launchType === null || launchType === void 0 ? void 0 : launchType.toLowerCase(), _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_ECS_TASK_ARN"]] = taskArn, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_ECS_TASK_FAMILY"]] = taskMetadata['Family'], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_ECS_TASK_REVISION"]] = taskMetadata['Revision'], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_ACCOUNT_ID"]] = accountId, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_REGION"]] = region, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_RESOURCE_ID"]] = containerArn, _a);
                // The availability zone is not available in all Fargate runtimes
                if (availabilityZone) {
                    attributes[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_AVAILABILITY_ZONE"]] = availabilityZone;
                }
                return [
                    2 /*return*/ ,
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"](attributes)
                ];
            });
        });
    };
    AwsEcsDetectorSync._getLogResource = function(containerMetadata) {
        return __awaiter(this, void 0, void 0, function() {
            var containerArn, logOptions, logsRegion, awsAccount, logsGroupName, logsGroupArn, logsStreamName, logsStreamArn;
            var _a;
            return __generator(this, function(_b) {
                if (containerMetadata['LogDriver'] !== 'awslogs' || !containerMetadata['LogOptions']) {
                    return [
                        2 /*return*/ ,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"].EMPTY
                    ];
                }
                containerArn = containerMetadata['ContainerARN'];
                logOptions = containerMetadata['LogOptions'];
                logsRegion = logOptions['awslogs-region'] || AwsEcsDetectorSync._getRegionFromArn(containerArn);
                awsAccount = AwsEcsDetectorSync._getAccountFromArn(containerArn);
                logsGroupName = logOptions['awslogs-group'];
                logsGroupArn = "arn:aws:logs:" + logsRegion + ":" + awsAccount + ":log-group:" + logsGroupName;
                logsStreamName = logOptions['awslogs-stream'];
                logsStreamArn = "arn:aws:logs:" + logsRegion + ":" + awsAccount + ":log-group:" + logsGroupName + ":log-stream:" + logsStreamName;
                return [
                    2 /*return*/ ,
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"]((_a = {}, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_LOG_GROUP_NAMES"]] = [
                        logsGroupName
                    ], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_LOG_GROUP_ARNS"]] = [
                        logsGroupArn
                    ], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_LOG_STREAM_NAMES"]] = [
                        logsStreamName
                    ], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_LOG_STREAM_ARNS"]] = [
                        logsStreamArn
                    ], _a))
                ];
            });
        });
    };
    AwsEcsDetectorSync._getAccountFromArn = function(containerArn) {
        var match = /arn:aws:ecs:[^:]+:([^:]+):.*/.exec(containerArn);
        return match[1];
    };
    AwsEcsDetectorSync._getRegionFromArn = function(containerArn) {
        var match = /arn:aws:ecs:([^:]+):.*/.exec(containerArn);
        return match[1];
    };
    AwsEcsDetectorSync._getUrlAsJson = function(url) {
        return new Promise(function(resolve, reject) {
            var request = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$http__$5b$external$5d$__$28$http$2c$__cjs$29$__["get"])(url, function(response) {
                if (response.statusCode && response.statusCode >= 400) {
                    reject(new Error("Request to '" + url + "' failed with status " + response.statusCode));
                }
                /*
                 * Concatenate the response out of chunks:
                 * https://nodejs.org/api/stream.html#stream_event_data
                 */ var responseBody = '';
                response.on('data', function(chunk) {
                    return responseBody += chunk.toString();
                });
                // All the data has been read, resolve the Promise
                response.on('end', function() {
                    return resolve(responseBody);
                });
                /*
                 * https://nodejs.org/api/http.html#httprequesturl-options-callback, see the
                 * 'In the case of a premature connection close after the response is received'
                 * case
                 */ request.on('error', reject);
            });
            // Set an aggressive timeout to prevent lock-ups
            request.setTimeout(HTTP_TIMEOUT_IN_MS, function() {
                request.destroy();
            });
            // Connection error, disconnection, etc.
            request.on('error', reject);
            request.end();
        }).then(function(responseBodyRaw) {
            return JSON.parse(responseBodyRaw);
        });
    };
    AwsEcsDetectorSync.CONTAINER_ID_LENGTH = 64;
    AwsEcsDetectorSync.DEFAULT_CGROUP_PATH = '/proc/self/cgroup';
    AwsEcsDetectorSync.readFileAsync = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__["promisify"])(__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["readFile"]);
    return AwsEcsDetectorSync;
}();
;
var awsEcsDetectorSync = new AwsEcsDetectorSync(); //# sourceMappingURL=AwsEcsDetectorSync.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEcsDetector.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsEcsDetector": (()=>AwsEcsDetector),
    "awsEcsDetector": (()=>awsEcsDetector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEcsDetectorSync.js [app-rsc] (ecmascript)");
;
/**
 * The AwsEcsDetector can be used to detect if a process is running in AWS
 * ECS and return a {@link Resource} populated with data about the ECS
 * plugins of AWS X-Ray.
 *
 * @deprecated Use {@link AwsEcsDetectorSync} class instead.
 */ var AwsEcsDetector = function() {
    function AwsEcsDetector() {}
    AwsEcsDetector.prototype.detect = function() {
        return Promise.resolve(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEcsDetectorSync"].detect());
    };
    return AwsEcsDetector;
}();
;
var awsEcsDetector = new AwsEcsDetector(); //# sourceMappingURL=AwsEcsDetector.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEksDetectorSync.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsEksDetectorSync": (()=>AwsEksDetectorSync),
    "awsEksDetectorSync": (()=>awsEksDetectorSync)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/@opentelemetry/api [external] (@opentelemetry/api, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resources/build/esm/Resource.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/semconv.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$https__$5b$external$5d$__$28$https$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/https [external] (https, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/fs [external] (fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/util [external] (util, cjs)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    "TURBOPACK unreachable";
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
;
;
;
;
;
;
;
;
/**
 * The AwsEksDetectorSync can be used to detect if a process is running in AWS Elastic
 * Kubernetes and return a {@link Resource} populated with data about the Kubernetes
 * plugins of AWS X-Ray. Returns an empty Resource if detection fails.
 *
 * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf
 * for more details about detecting information for Elastic Kubernetes plugins
 */ var AwsEksDetectorSync = function() {
    function AwsEksDetectorSync() {
        this.K8S_SVC_URL = 'kubernetes.default.svc';
        this.K8S_TOKEN_PATH = '/var/run/secrets/kubernetes.io/serviceaccount/token';
        this.K8S_CERT_PATH = '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt';
        this.AUTH_CONFIGMAP_PATH = '/api/v1/namespaces/kube-system/configmaps/aws-auth';
        this.CW_CONFIGMAP_PATH = '/api/v1/namespaces/amazon-cloudwatch/configmaps/cluster-info';
        this.CONTAINER_ID_LENGTH = 64;
        this.DEFAULT_CGROUP_PATH = '/proc/self/cgroup';
        this.TIMEOUT_MS = 2000;
        this.UTF8_UNICODE = 'utf8';
    }
    AwsEksDetectorSync.prototype.detect = function(_config) {
        var _this = this;
        var attributes = __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].with((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$core$2f$build$2f$esm$2f$trace$2f$suppress$2d$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["suppressTracing"])(__TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].active()), function() {
            return _this._getAttributes();
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"]({}, attributes);
    };
    /**
     * The AwsEksDetector can be used to detect if a process is running on Amazon
     * Elastic Kubernetes and returns a promise containing a {@link ResourceAttributes}
     * object with instance metadata. Returns a promise containing an
     * empty {@link ResourceAttributes} if the connection to kubernetes process
     * or aws config maps fails
     */ AwsEksDetectorSync.prototype._getAttributes = function() {
        return __awaiter(this, void 0, void 0, function() {
            var k8scert, containerId, clusterName, e_1;
            var _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _b.trys.push([
                            0,
                            6,
                            ,
                            7
                        ]);
                        return [
                            4 /*yield*/ ,
                            AwsEksDetectorSync.fileAccessAsync(this.K8S_TOKEN_PATH)
                        ];
                    case 1:
                        _b.sent();
                        return [
                            4 /*yield*/ ,
                            AwsEksDetectorSync.readFileAsync(this.K8S_CERT_PATH)
                        ];
                    case 2:
                        k8scert = _b.sent();
                        return [
                            4 /*yield*/ ,
                            this._isEks(k8scert)
                        ];
                    case 3:
                        if (!_b.sent()) {
                            return [
                                2 /*return*/ ,
                                {}
                            ];
                        }
                        return [
                            4 /*yield*/ ,
                            this._getContainerId()
                        ];
                    case 4:
                        containerId = _b.sent();
                        return [
                            4 /*yield*/ ,
                            this._getClusterName(k8scert)
                        ];
                    case 5:
                        clusterName = _b.sent();
                        return [
                            2 /*return*/ ,
                            !containerId && !clusterName ? {} : (_a = {}, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PROVIDER"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PROVIDER_VALUE_AWS"], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PLATFORM"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PLATFORM_VALUE_AWS_EKS"], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_K8S_CLUSTER_NAME"]] = clusterName || '', _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CONTAINER_ID"]] = containerId || '', _a)
                        ];
                    case 6:
                        e_1 = _b.sent();
                        __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["diag"].debug('Process is not running on K8S', e_1);
                        return [
                            2 /*return*/ ,
                            {}
                        ];
                    case 7:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Attempts to make a connection to AWS Config map which will
     * determine whether the process is running on an EKS
     * process if the config map is empty or not
     */ AwsEksDetectorSync.prototype._isEks = function(cert) {
        return __awaiter(this, void 0, void 0, function() {
            var options;
            var _a, _b;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        _a = {
                            ca: cert
                        };
                        _b = {};
                        return [
                            4 /*yield*/ ,
                            this._getK8sCredHeader()
                        ];
                    case 1:
                        options = (_a.headers = (_b.Authorization = _c.sent(), _b), _a.hostname = this.K8S_SVC_URL, _a.method = 'GET', _a.path = this.AUTH_CONFIGMAP_PATH, _a.timeout = this.TIMEOUT_MS, _a);
                        return [
                            4 /*yield*/ ,
                            this._fetchString(options)
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            !!_c.sent()
                        ];
                }
            });
        });
    };
    /**
     * Attempts to make a connection to Amazon Cloudwatch
     * Config Maps to grab cluster name
     */ AwsEksDetectorSync.prototype._getClusterName = function(cert) {
        return __awaiter(this, void 0, void 0, function() {
            var options, response;
            var _a, _b;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        _a = {
                            ca: cert
                        };
                        _b = {};
                        return [
                            4 /*yield*/ ,
                            this._getK8sCredHeader()
                        ];
                    case 1:
                        options = (_a.headers = (_b.Authorization = _c.sent(), _b), _a.host = this.K8S_SVC_URL, _a.method = 'GET', _a.path = this.CW_CONFIGMAP_PATH, _a.timeout = this.TIMEOUT_MS, _a);
                        return [
                            4 /*yield*/ ,
                            this._fetchString(options)
                        ];
                    case 2:
                        response = _c.sent();
                        try {
                            return [
                                2 /*return*/ ,
                                JSON.parse(response).data['cluster.name']
                            ];
                        } catch (e) {
                            __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["diag"].debug('Cannot get cluster name on EKS', e);
                        }
                        return [
                            2 /*return*/ ,
                            ''
                        ];
                }
            });
        });
    };
    /**
     * Reads the Kubernetes token path and returns kubernetes
     * credential header
     */ AwsEksDetectorSync.prototype._getK8sCredHeader = function() {
        return __awaiter(this, void 0, void 0, function() {
            var content, e_2;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            AwsEksDetectorSync.readFileAsync(this.K8S_TOKEN_PATH, this.UTF8_UNICODE)
                        ];
                    case 1:
                        content = _a.sent();
                        return [
                            2 /*return*/ ,
                            'Bearer ' + content
                        ];
                    case 2:
                        e_2 = _a.sent();
                        __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["diag"].debug('Unable to read Kubernetes client token.', e_2);
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            ''
                        ];
                }
            });
        });
    };
    /**
     * Read container ID from cgroup file generated from docker which lists the full
     * untruncated docker container ID at the end of each line.
     *
     * The predefined structure of calling /proc/self/cgroup when in a docker container has the structure:
     *
     * #:xxxxxx:/
     *
     * or
     *
     * #:xxxxxx:/docker/64characterID
     *
     * This function takes advantage of that fact by just reading the 64-character ID from the end of the
     * first line. In EKS, even if we fail to find target file or target file does
     * not contain container ID we do not throw an error but throw warning message
     * and then return null string
     */ AwsEksDetectorSync.prototype._getContainerId = function() {
        return __awaiter(this, void 0, void 0, function() {
            var rawData, splitData, _i, splitData_1, str, e_3;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            AwsEksDetectorSync.readFileAsync(this.DEFAULT_CGROUP_PATH, this.UTF8_UNICODE)
                        ];
                    case 1:
                        rawData = _a.sent();
                        splitData = rawData.trim().split('\n');
                        for(_i = 0, splitData_1 = splitData; _i < splitData_1.length; _i++){
                            str = splitData_1[_i];
                            if (str.length > this.CONTAINER_ID_LENGTH) {
                                return [
                                    2 /*return*/ ,
                                    str.substring(str.length - this.CONTAINER_ID_LENGTH)
                                ];
                            }
                        }
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        e_3 = _a.sent();
                        __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["diag"].debug("AwsEksDetector failed to read container ID: " + e_3.message);
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            undefined
                        ];
                }
            });
        });
    };
    /**
     * Establishes an HTTP connection to AWS instance document url.
     * If the application is running on an EKS instance, we should be able
     * to get back a valid JSON document. Parses that document and stores
     * the identity properties in a local map.
     */ AwsEksDetectorSync.prototype._fetchString = function(options) {
        return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            new Promise(function(resolve, reject) {
                                var timeoutId = setTimeout(function() {
                                    req.abort();
                                    reject(new Error('EKS metadata api request timed out.'));
                                }, 2000);
                                var req = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$https__$5b$external$5d$__$28$https$2c$__cjs$29$__["request"])(options, function(res) {
                                    clearTimeout(timeoutId);
                                    var statusCode = res.statusCode;
                                    res.setEncoding(_this.UTF8_UNICODE);
                                    var rawData = '';
                                    res.on('data', function(chunk) {
                                        return rawData += chunk;
                                    });
                                    res.on('end', function() {
                                        if (statusCode && statusCode >= 200 && statusCode < 300) {
                                            try {
                                                resolve(rawData);
                                            } catch (e) {
                                                reject(e);
                                            }
                                        } else {
                                            reject(new Error('Failed to load page, status code: ' + statusCode));
                                        }
                                    });
                                });
                                req.on('error', function(err) {
                                    clearTimeout(timeoutId);
                                    reject(err);
                                });
                                req.end();
                            })
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    AwsEksDetectorSync.readFileAsync = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__["promisify"])(__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["readFile"]);
    AwsEksDetectorSync.fileAccessAsync = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$util__$5b$external$5d$__$28$util$2c$__cjs$29$__["promisify"])(__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["access"]);
    return AwsEksDetectorSync;
}();
;
var awsEksDetectorSync = new AwsEksDetectorSync(); //# sourceMappingURL=AwsEksDetectorSync.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEksDetector.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsEksDetector": (()=>AwsEksDetector),
    "awsEksDetector": (()=>awsEksDetector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEksDetectorSync.js [app-rsc] (ecmascript)");
;
/**
 * The AwsEksDetector can be used to detect if a process is running in AWS Elastic
 * Kubernetes and return a {@link Resource} populated with data about the Kubernetes
 * plugins of AWS X-Ray. Returns an empty Resource if detection fails.
 *
 * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf
 * for more details about detecting information for Elastic Kubernetes plugins
 *
 * @deprecated Use the new {@link AwsEksDetectorSync} class instead.
 */ var AwsEksDetector = function() {
    function AwsEksDetector() {
        // NOTE: these readonly props are kept for testing purposes
        this.K8S_SVC_URL = 'kubernetes.default.svc';
        this.AUTH_CONFIGMAP_PATH = '/api/v1/namespaces/kube-system/configmaps/aws-auth';
        this.CW_CONFIGMAP_PATH = '/api/v1/namespaces/amazon-cloudwatch/configmaps/cluster-info';
        this.TIMEOUT_MS = 2000;
    }
    AwsEksDetector.prototype.detect = function(_config) {
        return Promise.resolve(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEksDetectorSync"].detect());
    };
    return AwsEksDetector;
}();
;
var awsEksDetector = new AwsEksDetector(); //# sourceMappingURL=AwsEksDetector.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsLambdaDetectorSync.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsLambdaDetectorSync": (()=>AwsLambdaDetectorSync),
    "awsLambdaDetectorSync": (()=>awsLambdaDetectorSync)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resources/build/esm/Resource.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/semconv.js [app-rsc] (ecmascript)");
;
;
/**
 * The AwsLambdaDetector can be used to detect if a process is running in AWS Lambda
 * and return a {@link Resource} populated with data about the environment.
 * Returns an empty Resource if detection fails.
 */ var AwsLambdaDetectorSync = function() {
    function AwsLambdaDetectorSync() {}
    AwsLambdaDetectorSync.prototype.detect = function(_config) {
        var _a;
        // Check if running inside AWS Lambda environment
        var executionEnv = process.env.AWS_EXECUTION_ENV;
        if (!(executionEnv === null || executionEnv === void 0 ? void 0 : executionEnv.startsWith('AWS_Lambda_'))) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"].empty();
        }
        // These environment variables are guaranteed to be present in Lambda environment
        // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime
        var region = process.env.AWS_REGION;
        var functionName = process.env.AWS_LAMBDA_FUNCTION_NAME;
        var functionVersion = process.env.AWS_LAMBDA_FUNCTION_VERSION;
        var memorySize = process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE;
        // These environment variables are not available in Lambda SnapStart functions
        var logGroupName = process.env.AWS_LAMBDA_LOG_GROUP_NAME;
        var logStreamName = process.env.AWS_LAMBDA_LOG_STREAM_NAME;
        var attributes = (_a = {}, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PROVIDER"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PROVIDER_VALUE_AWS"], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_PLATFORM"]] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CLOUD_PLATFORM_VALUE_AWS_LAMBDA"], _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_CLOUD_REGION"]] = region, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_FAAS_NAME"]] = functionName, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_FAAS_VERSION"]] = functionVersion, _a[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_FAAS_MAX_MEMORY"]] = parseInt(memorySize) * 1024 * 1024, _a);
        if (logGroupName) {
            attributes[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_AWS_LOG_GROUP_NAMES"]] = [
                logGroupName
            ];
        }
        if (logStreamName) {
            attributes[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$semconv$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ATTR_FAAS_INSTANCE"]] = logStreamName;
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resources$2f$build$2f$esm$2f$Resource$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Resource"](attributes);
    };
    return AwsLambdaDetectorSync;
}();
;
var awsLambdaDetectorSync = new AwsLambdaDetectorSync(); //# sourceMappingURL=AwsLambdaDetectorSync.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsLambdaDetector.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ __turbopack_context__.s({
    "AwsLambdaDetector": (()=>AwsLambdaDetector),
    "awsLambdaDetector": (()=>awsLambdaDetector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsLambdaDetectorSync.js [app-rsc] (ecmascript)");
;
/**
 * The AwsLambdaDetector can be used to detect if a process is running in AWS Lambda
 * and return a {@link Resource} populated with data about the environment.
 *
 * @deprecated Use {@link AwsLambdaDetectorSync} class instead
 */ var AwsLambdaDetector = function() {
    function AwsLambdaDetector() {}
    AwsLambdaDetector.prototype.detect = function(_config) {
        return Promise.resolve(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsLambdaDetectorSync"].detect(_config));
    };
    return AwsLambdaDetector;
}();
;
var awsLambdaDetector = new AwsLambdaDetector(); //# sourceMappingURL=AwsLambdaDetector.js.map
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AwsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsBeanstalkDetector"]),
    "AwsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsBeanstalkDetectorSync"]),
    "AwsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEcsDetector"]),
    "AwsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEcsDetectorSync"]),
    "AwsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEksDetector"]),
    "AwsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEksDetectorSync"]),
    "AwsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsLambdaDetector"]),
    "AwsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsLambdaDetectorSync"]),
    "awsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsBeanstalkDetector"]),
    "awsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsBeanstalkDetectorSync"]),
    "awsEc2Detector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEc2Detector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEc2Detector"]),
    "awsEc2DetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEc2DetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEc2DetectorSync"]),
    "awsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEcsDetector"]),
    "awsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEcsDetectorSync"]),
    "awsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEksDetector"]),
    "awsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEksDetectorSync"]),
    "awsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsLambdaDetector"]),
    "awsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsLambdaDetectorSync"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsBeanstalkDetector.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsBeanstalkDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsBeanstalkDetectorSync.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEc2Detector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEc2Detector.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEc2DetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEc2DetectorSync.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEcsDetector.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEcsDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEcsDetectorSync.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEksDetector.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsEksDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsEksDetectorSync.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetector$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsLambdaDetector.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$AwsLambdaDetectorSync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/AwsLambdaDetectorSync.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AwsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsBeanstalkDetector"]),
    "AwsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsBeanstalkDetectorSync"]),
    "AwsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEcsDetector"]),
    "AwsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEcsDetectorSync"]),
    "AwsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEksDetector"]),
    "AwsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEksDetectorSync"]),
    "AwsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsLambdaDetector"]),
    "AwsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsLambdaDetectorSync"]),
    "awsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsBeanstalkDetector"]),
    "awsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsBeanstalkDetectorSync"]),
    "awsEc2Detector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEc2Detector"]),
    "awsEc2DetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEc2DetectorSync"]),
    "awsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEcsDetector"]),
    "awsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEcsDetectorSync"]),
    "awsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEksDetector"]),
    "awsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEksDetectorSync"]),
    "awsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsLambdaDetector"]),
    "awsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsLambdaDetectorSync"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript) <exports>");
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AwsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsBeanstalkDetector"]),
    "AwsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsBeanstalkDetectorSync"]),
    "AwsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEcsDetector"]),
    "AwsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEcsDetectorSync"]),
    "AwsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEksDetector"]),
    "AwsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsEksDetectorSync"]),
    "AwsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsLambdaDetector"]),
    "AwsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AwsLambdaDetectorSync"]),
    "awsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsBeanstalkDetector"]),
    "awsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsBeanstalkDetectorSync"]),
    "awsEc2Detector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEc2Detector"]),
    "awsEc2DetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEc2DetectorSync"]),
    "awsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEcsDetector"]),
    "awsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEcsDetectorSync"]),
    "awsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEksDetector"]),
    "awsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsEksDetectorSync"]),
    "awsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsLambdaDetector"]),
    "awsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["awsLambdaDetectorSync"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$detectors$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/detectors/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AwsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsBeanstalkDetector"]),
    "AwsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsBeanstalkDetectorSync"]),
    "AwsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEcsDetector"]),
    "AwsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEcsDetectorSync"]),
    "AwsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEksDetector"]),
    "AwsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsEksDetectorSync"]),
    "AwsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsLambdaDetector"]),
    "AwsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AwsLambdaDetectorSync"]),
    "awsBeanstalkDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsBeanstalkDetector"]),
    "awsBeanstalkDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsBeanstalkDetectorSync"]),
    "awsEc2Detector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEc2Detector"]),
    "awsEc2DetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEc2DetectorSync"]),
    "awsEcsDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEcsDetector"]),
    "awsEcsDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEcsDetectorSync"]),
    "awsEksDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEksDetector"]),
    "awsEksDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsEksDetectorSync"]),
    "awsLambdaDetector": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsLambdaDetector"]),
    "awsLambdaDetectorSync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["awsLambdaDetectorSync"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$resource$2d$detector$2d$aws$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/@opentelemetry/resource-detector-aws/build/esm/index.js [app-rsc] (ecmascript) <exports>");
}}),

};

//# sourceMappingURL=node_modules_%40opentelemetry_resource-detector-aws_build_esm_6dd18d10._.js.map